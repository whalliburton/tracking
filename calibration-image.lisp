(in-package :tracking)

;; 7 cm chosen as the largest even cm to fit on an iphone ruler app

(defparameter *default-pixels-per-7cm-width* 275)
(defparameter *default-pixels-per-7cm-height* 275)

(defun calibration-width-height ()
  (unless (session-value 'calibration)
    (setf (session-value 'calibration)
          (list *default-pixels-per-7cm-width* *default-pixels-per-7cm-height*)))
  (values-list (session-value 'calibration)))

(defun calibration-image-dispatch ()
  (setf (hunchentoot:content-type*) "image/png")
  (multiple-value-bind (width height) (calibration-width-heigth)
      (with-canvas (:width width :height height)
        (let ((font (get-font (tracking-file "terminus.ttf"))))
          (set-font font 32)
          (set-rgba-fill 1.0 1.0 1.0 1.0)
          (set-rgba-stroke 1.0 1.0 1.0 1.0)
          (set-line-width 2.0)
          (rectangle 0 0 width height)
          (stroke)
          (centered-string-paths (/ width 2) (+ (/ height 2) 40)
                                 (format nil "~A" #\upwards_arrow))
          (centered-string-paths (/ width 2) (/ height 2)
                                 (format nil "~A 7cm ~A" #\leftwards_arrow #\rightwards_arrow))
          (centered-string-paths (/ width 2) (- (/ height 2) 40)
                                 (format nil "~A" #\downwards_arrow))
          (fill-path)
          (flexi-streams:with-output-to-sequence (stream)
            (save-png-stream stream))))))

(defun increase-calibration-width ()
  (multiple-value-bind (width height) (calibration-width-heigth)
    (setf (session-value 'calibration)
          (list (1+ width) height)))
  "reloadCalibrationImage();")

(defun increase-calibration-height ()
  (multiple-value-bind (width height) (calibration-width-heigth)
    (setf (session-value 'calibration)
          (list width (1+ height))))
  "reloadCalibrationImage();")

(defun decrease-calibration-width ()
  (multiple-value-bind (width height) (calibration-width-heigth)
    (setf (session-value 'calibration)
          (list (max (1- width) 1) height)))
  "reloadCalibrationImage();")

(defun decrease-calibration-height ()
  (multiple-value-bind (width height) (calibration-width-heigth)
    (setf (session-value 'calibration)
          (list width (max (1- height) 1))))
  "reloadCalibrationImage();")

(defun finish-calibration ()
  (setf (session-value 'calibrated) t)
  "go(\"/\");")

(defun recalibrate ()
  (setf (session-value 'calibrated) nil)
  "go(\"/\");")
